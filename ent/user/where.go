// Code generated by ent, DO NOT EDIT.

package user

import (
	"helium/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Forward applies equality check predicate on the "forward" field. It's identical to ForwardEQ.
func Forward(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldForward, v))
}

// Paid applies equality check predicate on the "paid" field. It's identical to PaidEQ.
func Paid(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPaid, v))
}

// Counter applies equality check predicate on the "counter" field. It's identical to CounterEQ.
func Counter(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCounter, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// EmailsIsNil applies the IsNil predicate on the "emails" field.
func EmailsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmails))
}

// EmailsNotNil applies the NotNil predicate on the "emails" field.
func EmailsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmails))
}

// ForwardEQ applies the EQ predicate on the "forward" field.
func ForwardEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldForward, v))
}

// ForwardNEQ applies the NEQ predicate on the "forward" field.
func ForwardNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldForward, v))
}

// PaidEQ applies the EQ predicate on the "paid" field.
func PaidEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPaid, v))
}

// PaidNEQ applies the NEQ predicate on the "paid" field.
func PaidNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPaid, v))
}

// CounterEQ applies the EQ predicate on the "counter" field.
func CounterEQ(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCounter, v))
}

// CounterNEQ applies the NEQ predicate on the "counter" field.
func CounterNEQ(v int8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCounter, v))
}

// CounterIn applies the In predicate on the "counter" field.
func CounterIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldIn(FieldCounter, vs...))
}

// CounterNotIn applies the NotIn predicate on the "counter" field.
func CounterNotIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCounter, vs...))
}

// CounterGT applies the GT predicate on the "counter" field.
func CounterGT(v int8) predicate.User {
	return predicate.User(sql.FieldGT(FieldCounter, v))
}

// CounterGTE applies the GTE predicate on the "counter" field.
func CounterGTE(v int8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCounter, v))
}

// CounterLT applies the LT predicate on the "counter" field.
func CounterLT(v int8) predicate.User {
	return predicate.User(sql.FieldLT(FieldCounter, v))
}

// CounterLTE applies the LTE predicate on the "counter" field.
func CounterLTE(v int8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCounter, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedAt))
}

// HasReceivers applies the HasEdge predicate on the "receivers" edge.
func HasReceivers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceiversTable, ReceiversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiversWith applies the HasEdge predicate on the "receivers" edge with a given conditions (other predicates).
func HasReceiversWith(preds ...predicate.Receiver) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReceiversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
