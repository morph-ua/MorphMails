// Code generated by ent, DO NOT EDIT.

package connector

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connector type in the database.
	Label = "connector"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// EdgeReceivers holds the string denoting the receivers edge name in mutations.
	EdgeReceivers = "receivers"
	// Table holds the table name of the connector in the database.
	Table = "connectors"
	// ReceiversTable is the table that holds the receivers relation/edge.
	ReceiversTable = "receivers"
	// ReceiversInverseTable is the table name for the Receiver entity.
	// It exists in this package in order to avoid circular dependency with the "receiver" package.
	ReceiversInverseTable = "receivers"
	// ReceiversColumn is the table column denoting the receivers relation/edge.
	ReceiversColumn = "connector_receivers"
)

// Columns holds all SQL columns for connector fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldSecret,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Connector queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// BySecret orders the results by the secret field.
func BySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecret, opts...).ToFunc()
}

// ByReceiversCount orders the results by receivers count.
func ByReceiversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiversStep(), opts...)
	}
}

// ByReceivers orders the results by receivers terms.
func ByReceivers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReceiversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceiversTable, ReceiversColumn),
	)
}
