// Code generated by ent, DO NOT EDIT.

package letter

import (
	"morph_mails/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Letter {
	return predicate.Letter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Letter {
	return predicate.Letter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Letter {
	return predicate.Letter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Letter {
	return predicate.Letter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Letter {
	return predicate.Letter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Letter {
	return predicate.Letter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Letter {
	return predicate.Letter(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Letter {
	return predicate.Letter(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Letter {
	return predicate.Letter(sql.FieldContainsFold(FieldID, id))
}

// HTML applies equality check predicate on the "html" field. It's identical to HTMLEQ.
func HTML(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldHTML, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldTo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldCreatedAt, v))
}

// HTMLEQ applies the EQ predicate on the "html" field.
func HTMLEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldHTML, v))
}

// HTMLNEQ applies the NEQ predicate on the "html" field.
func HTMLNEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldNEQ(FieldHTML, v))
}

// HTMLIn applies the In predicate on the "html" field.
func HTMLIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldIn(FieldHTML, vs...))
}

// HTMLNotIn applies the NotIn predicate on the "html" field.
func HTMLNotIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldNotIn(FieldHTML, vs...))
}

// HTMLGT applies the GT predicate on the "html" field.
func HTMLGT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGT(FieldHTML, v))
}

// HTMLGTE applies the GTE predicate on the "html" field.
func HTMLGTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGTE(FieldHTML, v))
}

// HTMLLT applies the LT predicate on the "html" field.
func HTMLLT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLT(FieldHTML, v))
}

// HTMLLTE applies the LTE predicate on the "html" field.
func HTMLLTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLTE(FieldHTML, v))
}

// HTMLContains applies the Contains predicate on the "html" field.
func HTMLContains(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContains(FieldHTML, v))
}

// HTMLHasPrefix applies the HasPrefix predicate on the "html" field.
func HTMLHasPrefix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasPrefix(FieldHTML, v))
}

// HTMLHasSuffix applies the HasSuffix predicate on the "html" field.
func HTMLHasSuffix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasSuffix(FieldHTML, v))
}

// HTMLEqualFold applies the EqualFold predicate on the "html" field.
func HTMLEqualFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEqualFold(FieldHTML, v))
}

// HTMLContainsFold applies the ContainsFold predicate on the "html" field.
func HTMLContainsFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContainsFold(FieldHTML, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Letter {
	return predicate.Letter(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Letter {
	return predicate.Letter(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Letter {
	return predicate.Letter(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Letter {
	return predicate.Letter(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Letter {
	return predicate.Letter(sql.FieldContainsFold(FieldTo, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Letter {
	return predicate.Letter(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Letter) predicate.Letter {
	return predicate.Letter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Letter) predicate.Letter {
	return predicate.Letter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Letter) predicate.Letter {
	return predicate.Letter(func(s *sql.Selector) {
		p(s.Not())
	})
}
