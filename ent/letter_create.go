// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"morph_mails/ent/letter"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LetterCreate is the builder for creating a Letter entity.
type LetterCreate struct {
	config
	mutation *LetterMutation
	hooks    []Hook
}

// SetHTML sets the "html" field.
func (lc *LetterCreate) SetHTML(s string) *LetterCreate {
	lc.mutation.SetHTML(s)
	return lc
}

// SetFrom sets the "from" field.
func (lc *LetterCreate) SetFrom(s string) *LetterCreate {
	lc.mutation.SetFrom(s)
	return lc
}

// SetTo sets the "to" field.
func (lc *LetterCreate) SetTo(s string) *LetterCreate {
	lc.mutation.SetTo(s)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LetterCreate) SetCreatedAt(t time.Time) *LetterCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LetterCreate) SetNillableCreatedAt(t *time.Time) *LetterCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LetterCreate) SetID(s string) *LetterCreate {
	lc.mutation.SetID(s)
	return lc
}

// Mutation returns the LetterMutation object of the builder.
func (lc *LetterCreate) Mutation() *LetterMutation {
	return lc.mutation
}

// Save creates the Letter in the database.
func (lc *LetterCreate) Save(ctx context.Context) (*Letter, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LetterCreate) SaveX(ctx context.Context) *Letter {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LetterCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LetterCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LetterCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := letter.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LetterCreate) check() error {
	if _, ok := lc.mutation.HTML(); !ok {
		return &ValidationError{Name: "html", err: errors.New(`ent: missing required field "Letter.html"`)}
	}
	if _, ok := lc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Letter.from"`)}
	}
	if v, ok := lc.mutation.From(); ok {
		if err := letter.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Letter.from": %w`, err)}
		}
	}
	if _, ok := lc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Letter.to"`)}
	}
	if v, ok := lc.mutation.To(); ok {
		if err := letter.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Letter.to": %w`, err)}
		}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Letter.created_at"`)}
	}
	return nil
}

func (lc *LetterCreate) sqlSave(ctx context.Context) (*Letter, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Letter.ID type: %T", _spec.ID.Value)
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LetterCreate) createSpec() (*Letter, *sqlgraph.CreateSpec) {
	var (
		_node = &Letter{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(letter.Table, sqlgraph.NewFieldSpec(letter.FieldID, field.TypeString))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.HTML(); ok {
		_spec.SetField(letter.FieldHTML, field.TypeString, value)
		_node.HTML = value
	}
	if value, ok := lc.mutation.From(); ok {
		_spec.SetField(letter.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := lc.mutation.To(); ok {
		_spec.SetField(letter.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(letter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// LetterCreateBulk is the builder for creating many Letter entities in bulk.
type LetterCreateBulk struct {
	config
	builders []*LetterCreate
}

// Save creates the Letter entities in the database.
func (lcb *LetterCreateBulk) Save(ctx context.Context) ([]*Letter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Letter, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LetterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LetterCreateBulk) SaveX(ctx context.Context) []*Letter {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LetterCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LetterCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
