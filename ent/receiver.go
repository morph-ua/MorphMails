// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"morph_mails/ent/connector"
	"morph_mails/ent/receiver"
	"morph_mails/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Receiver is the model entity for the Receiver schema.
type Receiver struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiverQuery when eager-loading is set.
	Edges               ReceiverEdges `json:"edges"`
	connector_receivers *string
	user_receivers      *uuid.UUID
	selectValues        sql.SelectValues
}

// ReceiverEdges holds the relations/edges for other nodes in the graph.
type ReceiverEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Connector holds the value of the connector edge.
	Connector *Connector `json:"connector,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiverEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ConnectorOrErr returns the Connector value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiverEdges) ConnectorOrErr() (*Connector, error) {
	if e.loadedTypes[1] {
		if e.Connector == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: connector.Label}
		}
		return e.Connector, nil
	}
	return nil, &NotLoadedError{edge: "connector"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receiver) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receiver.FieldID:
			values[i] = new(sql.NullString)
		case receiver.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case receiver.ForeignKeys[0]: // connector_receivers
			values[i] = new(sql.NullString)
		case receiver.ForeignKeys[1]: // user_receivers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receiver fields.
func (r *Receiver) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receiver.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case receiver.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case receiver.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connector_receivers", values[i])
			} else if value.Valid {
				r.connector_receivers = new(string)
				*r.connector_receivers = value.String
			}
		case receiver.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_receivers", values[i])
			} else if value.Valid {
				r.user_receivers = new(uuid.UUID)
				*r.user_receivers = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Receiver.
// This includes values selected through modifiers, order, etc.
func (r *Receiver) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Receiver entity.
func (r *Receiver) QueryUser() *UserQuery {
	return NewReceiverClient(r.config).QueryUser(r)
}

// QueryConnector queries the "connector" edge of the Receiver entity.
func (r *Receiver) QueryConnector() *ConnectorQuery {
	return NewReceiverClient(r.config).QueryConnector(r)
}

// Update returns a builder for updating this Receiver.
// Note that you need to call Receiver.Unwrap() before calling this method if this Receiver
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Receiver) Update() *ReceiverUpdateOne {
	return NewReceiverClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Receiver entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Receiver) Unwrap() *Receiver {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Receiver is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Receiver) String() string {
	var builder strings.Builder
	builder.WriteString("Receiver(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Receivers is a parsable slice of Receiver.
type Receivers []*Receiver
