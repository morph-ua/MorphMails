// Code generated by ent, DO NOT EDIT.

package ent

import (
	"morph_mails/ent/connector"
	"morph_mails/ent/letter"
	"morph_mails/ent/receiver"
	"morph_mails/ent/schema"
	"morph_mails/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	connectorFields := schema.Connector{}.Fields()
	_ = connectorFields
	// connectorDescCreatedAt is the schema descriptor for created_at field.
	connectorDescCreatedAt := connectorFields[4].Descriptor()
	// connector.DefaultCreatedAt holds the default value on creation for the created_at field.
	connector.DefaultCreatedAt = connectorDescCreatedAt.Default.(func() time.Time)
	letterFields := schema.Letter{}.Fields()
	_ = letterFields
	// letterDescFrom is the schema descriptor for from field.
	letterDescFrom := letterFields[2].Descriptor()
	// letter.FromValidator is a validator for the "from" field. It is called by the builders before save.
	letter.FromValidator = letterDescFrom.Validators[0].(func(string) error)
	// letterDescTo is the schema descriptor for to field.
	letterDescTo := letterFields[3].Descriptor()
	// letter.ToValidator is a validator for the "to" field. It is called by the builders before save.
	letter.ToValidator = letterDescTo.Validators[0].(func(string) error)
	// letterDescCreatedAt is the schema descriptor for created_at field.
	letterDescCreatedAt := letterFields[4].Descriptor()
	// letter.DefaultCreatedAt holds the default value on creation for the created_at field.
	letter.DefaultCreatedAt = letterDescCreatedAt.Default.(func() time.Time)
	receiverFields := schema.Receiver{}.Fields()
	_ = receiverFields
	// receiverDescCreatedAt is the schema descriptor for created_at field.
	receiverDescCreatedAt := receiverFields[1].Descriptor()
	// receiver.DefaultCreatedAt holds the default value on creation for the created_at field.
	receiver.DefaultCreatedAt = receiverDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescForward is the schema descriptor for forward field.
	userDescForward := userFields[2].Descriptor()
	// user.DefaultForward holds the default value on creation for the forward field.
	user.DefaultForward = userDescForward.Default.(bool)
	// userDescPaid is the schema descriptor for paid field.
	userDescPaid := userFields[3].Descriptor()
	// user.DefaultPaid holds the default value on creation for the paid field.
	user.DefaultPaid = userDescPaid.Default.(bool)
	// userDescCounter is the schema descriptor for counter field.
	userDescCounter := userFields[4].Descriptor()
	// user.DefaultCounter holds the default value on creation for the counter field.
	user.DefaultCounter = userDescCounter.Default.(int8)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[5].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
