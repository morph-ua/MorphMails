// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"helium/ent/connector"
	"helium/ent/predicate"
	"helium/ent/receiver"
	"helium/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ReceiverUpdate is the builder for updating Receiver entities.
type ReceiverUpdate struct {
	config
	hooks    []Hook
	mutation *ReceiverMutation
}

// Where appends a list predicates to the ReceiverUpdate builder.
func (ru *ReceiverUpdate) Where(ps ...predicate.Receiver) *ReceiverUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ReceiverUpdate) SetUserID(id uuid.UUID) *ReceiverUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReceiverUpdate) SetUser(u *User) *ReceiverUpdate {
	return ru.SetUserID(u.ID)
}

// SetConnectorID sets the "connector" edge to the Connector entity by ID.
func (ru *ReceiverUpdate) SetConnectorID(id string) *ReceiverUpdate {
	ru.mutation.SetConnectorID(id)
	return ru
}

// SetConnector sets the "connector" edge to the Connector entity.
func (ru *ReceiverUpdate) SetConnector(c *Connector) *ReceiverUpdate {
	return ru.SetConnectorID(c.ID)
}

// Mutation returns the ReceiverMutation object of the builder.
func (ru *ReceiverUpdate) Mutation() *ReceiverMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReceiverUpdate) ClearUser() *ReceiverUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearConnector clears the "connector" edge to the Connector entity.
func (ru *ReceiverUpdate) ClearConnector() *ReceiverUpdate {
	ru.mutation.ClearConnector()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReceiverUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReceiverUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReceiverUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReceiverUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReceiverUpdate) check() error {
	if _, ok := ru.mutation.UserID(); ru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receiver.user"`)
	}
	if _, ok := ru.mutation.ConnectorID(); ru.mutation.ConnectorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receiver.connector"`)
	}
	return nil
}

func (ru *ReceiverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(receiver.Table, receiver.Columns, sqlgraph.NewFieldSpec(receiver.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(receiver.FieldCreatedAt, field.TypeTime)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.UserTable,
			Columns: []string{receiver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.UserTable,
			Columns: []string{receiver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.ConnectorTable,
			Columns: []string{receiver.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.ConnectorTable,
			Columns: []string{receiver.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receiver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReceiverUpdateOne is the builder for updating a single Receiver entity.
type ReceiverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceiverMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ReceiverUpdateOne) SetUserID(id uuid.UUID) *ReceiverUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReceiverUpdateOne) SetUser(u *User) *ReceiverUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetConnectorID sets the "connector" edge to the Connector entity by ID.
func (ruo *ReceiverUpdateOne) SetConnectorID(id string) *ReceiverUpdateOne {
	ruo.mutation.SetConnectorID(id)
	return ruo
}

// SetConnector sets the "connector" edge to the Connector entity.
func (ruo *ReceiverUpdateOne) SetConnector(c *Connector) *ReceiverUpdateOne {
	return ruo.SetConnectorID(c.ID)
}

// Mutation returns the ReceiverMutation object of the builder.
func (ruo *ReceiverUpdateOne) Mutation() *ReceiverMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReceiverUpdateOne) ClearUser() *ReceiverUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearConnector clears the "connector" edge to the Connector entity.
func (ruo *ReceiverUpdateOne) ClearConnector() *ReceiverUpdateOne {
	ruo.mutation.ClearConnector()
	return ruo
}

// Where appends a list predicates to the ReceiverUpdate builder.
func (ruo *ReceiverUpdateOne) Where(ps ...predicate.Receiver) *ReceiverUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReceiverUpdateOne) Select(field string, fields ...string) *ReceiverUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Receiver entity.
func (ruo *ReceiverUpdateOne) Save(ctx context.Context) (*Receiver, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReceiverUpdateOne) SaveX(ctx context.Context) *Receiver {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReceiverUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReceiverUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReceiverUpdateOne) check() error {
	if _, ok := ruo.mutation.UserID(); ruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receiver.user"`)
	}
	if _, ok := ruo.mutation.ConnectorID(); ruo.mutation.ConnectorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receiver.connector"`)
	}
	return nil
}

func (ruo *ReceiverUpdateOne) sqlSave(ctx context.Context) (_node *Receiver, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receiver.Table, receiver.Columns, sqlgraph.NewFieldSpec(receiver.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Receiver.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, receiver.FieldID)
		for _, f := range fields {
			if !receiver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != receiver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(receiver.FieldCreatedAt, field.TypeTime)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.UserTable,
			Columns: []string{receiver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.UserTable,
			Columns: []string{receiver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.ConnectorTable,
			Columns: []string{receiver.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receiver.ConnectorTable,
			Columns: []string{receiver.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Receiver{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receiver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
