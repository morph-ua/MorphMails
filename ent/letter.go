// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"morph_mails/ent/letter"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Letter is the model entity for the Letter schema.
type Letter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HTML holds the value of the "html" field.
	HTML string `json:"html,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Letter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case letter.FieldID, letter.FieldHTML, letter.FieldFrom, letter.FieldTo:
			values[i] = new(sql.NullString)
		case letter.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Letter fields.
func (l *Letter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case letter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case letter.FieldHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html", values[i])
			} else if value.Valid {
				l.HTML = value.String
			}
		case letter.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				l.From = value.String
			}
		case letter.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				l.To = value.String
			}
		case letter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Letter.
// This includes values selected through modifiers, order, etc.
func (l *Letter) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Letter.
// Note that you need to call Letter.Unwrap() before calling this method if this Letter
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Letter) Update() *LetterUpdateOne {
	return NewLetterClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Letter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Letter) Unwrap() *Letter {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Letter is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Letter) String() string {
	var builder strings.Builder
	builder.WriteString("Letter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("html=")
	builder.WriteString(l.HTML)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(l.From)
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(l.To)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Letters is a parsable slice of Letter.
type Letters []*Letter
